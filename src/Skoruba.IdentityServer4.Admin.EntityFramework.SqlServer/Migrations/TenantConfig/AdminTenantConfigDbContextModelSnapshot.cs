// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skoruba.IdentityServer4.Admin.EntityFramework.Shared.DbContexts;

namespace Skoruba.IdentityServer4.Admin.EntityFramework.SqlServer.Migrations.TenantConfig
{
    [DbContext(typeof(AdminTenantConfigDbContext))]
    partial class AdminTenantConfigDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.ClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsVisibleOnRegistration")
                        .HasColumnType("bit");

                    b.Property<string>("Lead")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("TenantConfigurationId", "TypeName")
                        .IsUnique()
                        .HasName("IX_Tenant_TypeName");

                    b.ToTable("ClaimTypes");
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.ExternalProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Callback")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConsumerKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("TenantConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantConfigurationId");

                    b.ToTable("ExternalProviders");
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.PasswordPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinimumLength")
                        .HasColumnType("int");

                    b.Property<bool>("RequireDigit")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireLowerCase")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireNonAlphaNumeric")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireUpperCase")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantConfigurationId")
                        .IsUnique();

                    b.ToTable("PasswordPolicies");
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.TenantConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactUsUrl")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("EmailVerification")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalRegistrationUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("FirstPartyRequired")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleAnalyticsId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GoogleTagManagerId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsReCaptchaEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecondPageRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVanityUrl")
                        .HasColumnType("bit");

                    b.Property<string>("LoginUrl")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("OptimizelyId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PermutiveApiKey")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PermutiveProjectId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ReCaptchaSecretKey")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ReCaptchaSiteKey")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RegisterUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SecondPageRegistrationUrl")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SiteUrl")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("StyleManifestUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Tenant")
                        .IsUnique()
                        .HasName("IX_Tenant");

                    b.ToTable("TenantConfigurations");
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.ClaimType", b =>
                {
                    b.HasOne("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.TenantConfiguration", "TenantConfiguration")
                        .WithMany("ClaimTypes")
                        .HasForeignKey("TenantConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.ExternalProvider", b =>
                {
                    b.HasOne("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.TenantConfiguration", "TenantConfiguration")
                        .WithMany("ExternalProviders")
                        .HasForeignKey("TenantConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.PasswordPolicy", b =>
                {
                    b.HasOne("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.TenantConfiguration", "TenantConfiguration")
                        .WithOne("PasswordPolicy")
                        .HasForeignKey("Skoruba.IdentityServer4.Admin.EntityFramework.Entities.PasswordPolicy", "TenantConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
